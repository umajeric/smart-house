apply plugin: 'java'
description = 'smart-house-server'
dependencies {
    compile project(':smart-house-library')
    compile project(':smart-house-persistence')
    compile project(':smart-house-xstream-impl')
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.3.14.v20161028'

    compile(group: 'com.pi4j', name: 'pi4j-core', version: '0.0.5') {
        exclude(module: 'pi4j-native')
    }
    compile group: 'com.pi4j', name: 'pi4j-device', version: '0.0.5'
    compile group: 'com.pi4j', name: 'pi4j-gpio-extension', version: '0.0.5'
    compile group: 'javax.mail', name: 'mail', version: '1.4.7'
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.1'
    compile group: 'com.luckycatlabs', name: 'SunriseSunsetCalculator', version: '1.1'
    compile group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: '2.5.1'
    compile group: 'com.h2database', name: 'h2', version: '1.3.174'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'
    compile group: 'org.json', name: 'json', version: '20151123'

    // Alexa dependencies
    compile group: 'com.amazon.alexa', name: 'alexa-skills-kit', version: '1.1.2'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.14.v20161028'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'

    // test dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

def mainClassName = "si.majeric.smarthouse.SmartHouseServer"

jar {
    manifest {
        attributes 'Implementation-Title': 'SmartHouse Server',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': "$mainClassName"
    }

    from(configurations.compile.filter( {! (it.name ==~ /.*\.so/ )}).collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}